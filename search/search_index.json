{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AWS Observability Accelerator for Terraform","text":"<p>Welcome to the AWS Observability Accelerator for Terraform!</p> <p>The AWS Observability Accelerator for Terraform is a set of opinionated modules to help you set up observability for your AWS environments with AWS-managed observability services such as Amazon Managed Service for Prometheus, Amazon Managed Grafana, AWS Distro for OpenTelemetry (ADOT) and Amazon CloudWatch.</p> <p>We provide curated metrics, logs, traces collection, alerting rules and Grafana dashboards for your EKS infrastructure, Java/JMX, NGINX based workloads and your custom applications.</p> <p>You also can monitor your Amazon Managed Service for Prometheus workspaces ingestion, costs, active series with this module.</p> <p></p>"},{"location":"#getting-started","title":"Getting started","text":"<p>This project provides a set of Terraform modules to enable metrics, logs and traces collection, dashboards and alerts for monitoring:</p> <ul> <li>Amazon EKS clusters infrastructure and applications</li> <li>NGINX workloads (running on Amazon EKS)</li> <li>Java/JMX workloads (running on Amazon EKS)</li> <li>Amazon Managed Service for Prometheus workspaces with Amazon CloudWatch</li> <li>Installs Grafana Operator to add AWS data sources and create Grafana Dashboards to Amazon Managed Grafana.</li> <li>Installs FluxCD to perform GitOps sync of a Git Repo to EKS Cluster. We will use this later for creating Grafana Dashboards and AWS datasources to Amazon Managed Grafana.</li> <li>Installs External Secrets Operator to retrieve and Sync the Grafana API keys.</li> </ul> <p>These modules can be directly configured in your existing Terraform configurations or ready to be deployed in our packaged examples</p> <p>Tip</p> <p>We have supporting examples for quick setup such as:</p> <ul> <li>Creating a new Amazon EKS cluster and a VPC</li> <li>Creating and configure an Amazon Managed Grafana workspace with SSO</li> </ul>"},{"location":"#motivation","title":"Motivation","text":"<p>To gain deep visibility into your workloads and environments, AWS proposes a set of secure, scalable, highly available, production-grade managed open source services such as Amazon Managed Service for Prometheus, Amazon Managed Grafana and Amazon OpenSearch.</p> <p>AWS customers have asked for best-practices and guidance to collect metrics, logs and traces from their containerized applications and microservices with ease of deployment. Customers can use the AWS Observability Accelerator to configure their metrics and traces collection, leveraging AWS Distro for OpenTelemetry, to have opinionated dashboards and alerts available in only minutes.</p>"},{"location":"#support-feedback","title":"Support &amp; Feedback","text":"<p>AWS Observability Accelerator for Terraform is maintained by AWS Solution Architects. It is not part of an AWS service and support is provided best-effort by the AWS Observability Accelerator community.</p> <p>To post feedback, submit feature ideas, or report bugs, please use the issues section of this GitHub repo.</p> <p>If you are interested in contributing, see the contribution guide.</p>"},{"location":"concepts/","title":"Concepts","text":""},{"location":"concepts/#prerequisites","title":"Prerequisites","text":"<p>All examples in this repository require the following tools installed</p> <ol> <li>Terraform</li> <li>AWS CLI</li> <li>Kubectl</li> </ol>"},{"location":"concepts/#minimum-iam-policy","title":"Minimum IAM Policy","text":"<p>To run the examples, you need a set of AWS IAM permissions. You can find an example of minimum permissions required in this file.</p> <p>Warning</p> <p>The policy resource is set as <code>*</code> to allow all resources, this is not a recommended practice. You should restrict instead to the ARNs when applicable.</p>"},{"location":"concepts/#terraform-states-and-variables","title":"Terraform states and variables","text":"<p>By default, our examples are using local Terraform states. If you need your Terraform states to be saved remotely, on Amazon S3, visit the terraform remote states documentation.</p> <p>For simplicity, we use Terraform supported environment variables. You can also edit the <code>terraform.tfvars</code> files directly and deploy with <code>terraform apply -var-file=terraform.tfvars</code>. Terraform tfvars file can be useful if you need to track changes as part of a Git repository or CI/CD pipeline.</p> <p>Warning</p> <p>When using <code>tfvars</code> files, always be careful to not store and commit any secrets (keys,     passwords, ...)</p>"},{"location":"concepts/#v2x-changes","title":"v2.x changes","text":"<p>v2.x releases introduce couple of breaking changes compared to previous versions:</p> <ul> <li><code>modules/workloads/infra</code> module moves to <code>modules/eks-monitoring</code></li> <li>EKS configuration options moves from the base  module to the <code>eks-monitoring</code> module</li> <li>EKS workload modules java,nginx merge into <code>eks-monitoring</code> as configuration options (patterns), see examples</li> <li>Examples have been updated to reflect these changes</li> </ul>"},{"location":"concepts/#base-module","title":"Base module","text":"<p>The base module allows you to configure the AWS Observability services for your cluster and the AWS Distro for OpenTelemetry (ADOT) Operator as the signals collection mechanism.</p> <p>This is the minimum configuration to have a new Amazon Managed Service for Prometheus Workspace and ADOT Operator deployed for you and ready to receive your data. The base module serve as an anchor to the workload modules and cannot run on its own.</p> <pre><code>module \"aws_observability_accelerator\" {\n  # use release tags and check for the latest versions\n  # https://github.com/aws-observability/terraform-aws-observability-accelerator/releases\nsource = \"github.com/aws-observability/terraform-aws-observability-accelerator?ref=v1.6.1\"\n\naws_region     = \"eu-west-1\"\neks_cluster_id = \"my-eks-cluster\"\n\n  # As Grafana shares a different lifecycle, we recommend using an existing workspace.\nmanaged_grafana_workspace_id = var.managed_grafana_workspace_id\ngrafana_api_key              = var.grafana_api_key\n}\n</code></pre> <p>You can optionally reuse an existing Amazon Managed Service for Prometheus Workspace:</p> <pre><code>module \"aws_observability_accelerator\" {\n  # use release tags and check for the latest versions\n  # https://github.com/aws-observability/terraform-aws-observability-accelerator/releases\nsource = \"github.com/aws-observability/terraform-aws-observability-accelerator?ref=v1.6.1\"\n\naws_region     = \"eu-west-1\"\neks_cluster_id = \"my-eks-cluster\"\n\n  # prevents creation of a new Amazon Managed Prometheus workspace\nenable_managed_prometheus = false\n\n  # reusing existing Amazon Managed Prometheus Workspace\nmanaged_prometheus_workspace_id  = \"ws-abcd123...\"\n\nmanaged_grafana_workspace_id = \"g-abcdef123\"\ngrafana_api_key              = var.grafana_api_key\n}\n</code></pre> <p>View all the configuration options in the module's documentation</p>"},{"location":"concepts/#workload-modules","title":"Workload modules","text":"<p>Workloads modules are focused Terraform modules provided in this repository. They essentially provide curated metrics collection, alerts and Grafana dashboards according to the use case. Most of those modules require the base module.</p> <p>You can check the full workload modules list and their documentation here.</p> <p>All the modules come with end-to-end deployable examples.</p>"},{"location":"concepts/#examples","title":"Examples","text":"<p>Examples put modules together in a ready to deploy terraform configuration as a starting point. With little to no configuration, you can run <code>terraform apply</code> and use the deployed resources on your AWS Account.</p> <p>You can find workload examples like Amazon EKS infrastructure monitoring or monitoring your Amazon Managed Service for Prometheus workspace and more.</p> <pre><code>classDiagram\n    Example &lt;|-- Base Module\n    Example &lt;|-- Workload Module\n    class Base Module{\n        Amazon Managed Prometheus\n        Amazon Managed Grafana Data Sources\n    }\n    class Workload Module{\n        Amazon Distro for Open Telemetry Config\n        Amazon Managed Prometheus Alerts\n        Amazon Managed Grafana Dashboards\n    }</code></pre>"},{"location":"concepts/#getting-started-with-aws-observability-services","title":"Getting started with AWS Observability services","text":"<p>If you are new to AWS Observability services, or want to dive deeper into them, check our One Observability Workshop for a hands-on experience in a self-paced environement or at an AWS venue.</p>"},{"location":"contributors/","title":"Contributors","text":"<p>The content on this site is maintained by the Solutions Architects from the AWS observability team with support from the AWS service teams and other volunteers from across the organization.</p> <p>Our goal is to make it easier to use AWS Open Source Observability Services.</p> <p>The core team include the following people:</p> <ul> <li>Abhi Khanna</li> <li>Imaya Kumar Jagannathan</li> <li>Jerome DECQ</li> <li>Kevin Lewin</li> <li>Michael Hausenblas</li> <li>Munish Dabra</li> <li>Ramesh Kumar Venkatraman</li> <li>Rodrigue Koffi</li> <li>Toshal Dudhwhala</li> <li>Vara Bonthu</li> <li>Vikram Venkataraman</li> </ul> <p>We welcome the wider open source community and thank those who contribute to this project.</p> <p>Note that all information published on this site is available via the Apache 2.0 license.</p>"},{"location":"support/","title":"Support &amp; Feedback","text":"<p>AWS Observability Accelerator for Terraform is maintained by AWS Solution Architects. It is not part of an AWS service and support is provided best-effort by the AWS Observability Accelerator community.</p> <p>To post feedback, submit feature ideas, or report bugs, please use the issues section of this GitHub repo.</p> <p>If you are interested in contributing, see the contribution guide.</p>"},{"location":"eks/","title":"Amazon EKS cluster metrics","text":"<p>This example demonstrates how to monitor your Amazon Elastic Kubernetes Service (Amazon EKS) cluster with the Observability Accelerator's EKS monitoring module.</p> <p>Monitoring Amazon Elastic Kubernetes Service (Amazon EKS) for metrics has two categories: the control plane and the Amazon EKS nodes (with Kubernetes objects). The Amazon EKS control plane consists of control plane nodes that run the Kubernetes software, such as etcd and the Kubernetes API server. To read more on the components of an Amazon EKS cluster, please read the service documentation.</p> <p>The Amazon EKS infrastructure Terraform modules focuses on metrics collection to Amazon Managed Service for Prometheus using the AWS Distro for OpenTelemetry Operator for Amazon EKS. It deploys the node exporter and kube-state-metrics in your cluster.</p> <p>It provides default dashboards to get a comprehensible visibility on your nodes, namespaces, pods, and kubelet operations health. Finally, you get curated Prometheus recording rules and alerts to operate your cluster.</p> <p>Additionally, you can optionally collect custom Prometheus metrics from your applications running on your EKS cluster.</p>"},{"location":"eks/#prerequisites","title":"Prerequisites","text":"<p>Note</p> <p>Make sure to complete the prerequisites section before proceeding.</p>"},{"location":"eks/#setup","title":"Setup","text":""},{"location":"eks/#1-download-sources-and-initialize-terraform","title":"1. Download sources and initialize Terraform","text":"<pre><code>git clone https://github.com/aws-observability/terraform-aws-observability-accelerator.git\ncd examples/existing-cluster-with-base-and-infra\nterraform init\n</code></pre>"},{"location":"eks/#2-aws-region","title":"2. AWS Region","text":"<p>Specify the AWS Region where the resources will be deployed:</p> <pre><code>export TF_VAR_aws_region=xxx\n</code></pre>"},{"location":"eks/#3-amazon-eks-cluster","title":"3. Amazon EKS Cluster","text":"<p>To run this example, you need to provide your EKS cluster name. If you don't have a cluster ready, visit this example first to create a new one.</p> <p>Specify your cluster name:</p> <pre><code>export TF_VAR_eks_cluster_id=xxx\n</code></pre>"},{"location":"eks/#4-amazon-managed-service-for-prometheus-workspace-optional","title":"4. Amazon Managed Service for Prometheus workspace (optional)","text":"<p>By default, we create an Amazon Managed Service for Prometheus workspace for you. However, if you have an existing workspace you want to reuse, edit and run:</p> <pre><code>export TF_VAR_managed_prometheus_workspace_id=ws-xxx\n</code></pre> <p>To create a workspace outside of Terraform's state, simply run:</p> <pre><code>aws amp create-workspace --alias observability-accelerator --query '.workspaceId' --output text\n</code></pre>"},{"location":"eks/#5-amazon-managed-grafana-workspace","title":"5. Amazon Managed Grafana workspace","text":"<p>To run this example you need an Amazon Managed Grafana workspace. If you have an existing workspace, create an environment variable as described below. To create a new workspace, visit our supporting example for Grafana.</p> <p>Note</p> <p>For the URL <code>https://g-xyz.grafana-workspace.eu-central-1.amazonaws.com</code>, the workspace ID would be <code>g-xyz</code></p> <pre><code>export TF_VAR_managed_grafana_workspace_id=g-xxx\n</code></pre>"},{"location":"eks/#6-grafana-api-key","title":"6. Grafana API Key","text":"<p>Amazon Managed Grafana provides a control plane API for generating Grafana API keys. As a security best practice, we will provide to Terraform a short lived API key to run the <code>apply</code> or <code>destroy</code> command.</p> <p>Ensure you have necessary IAM permissions (<code>CreateWorkspaceApiKey, DeleteWorkspaceApiKey</code>)</p> <pre><code>export TF_VAR_grafana_api_key=`aws grafana create-workspace-api-key --key-name \"observability-accelerator-$(date +%s)\" --key-role ADMIN --seconds-to-live 1200 --workspace-id $TF_VAR_managed_grafana_workspace_id --query key --output text`\n</code></pre>"},{"location":"eks/#deploy","title":"Deploy","text":"<p>Simply run this command to deploy the example</p> <pre><code>terraform apply\n</code></pre>"},{"location":"eks/#visualization","title":"Visualization","text":""},{"location":"eks/#1-prometheus-datasource-on-grafana","title":"1. Prometheus datasource on Grafana","text":"<p>Make sure to open the link in the output. After a successful deployment, this will open the Prometheus datasource configuration on Grafana. Click <code>Save &amp; test</code> and you should see a notification confirming that the Amazon Managed Service for Prometheus workspace is ready to be used on Grafana.</p> <pre><code>terraform output grafana_prometheus_datasource_test\n</code></pre>"},{"location":"eks/#2-grafana-dashboards","title":"2. Grafana dashboards","text":"<p>Go to the Dashboards panel of your Grafana workspace. You should see a list of dashboards under the <code>Observability Accelerator Dashboards</code></p> <p></p> <p>Open a specific dashboard and you should be able to view its visualization</p> <p></p>"},{"location":"eks/#3-amazon-managed-service-for-prometheus-rules-and-alerts","title":"3. Amazon Managed Service for Prometheus rules and alerts","text":"<p>Open the Amazon Managed Service for Prometheus console and view the details of your workspace. Under the <code>Rules management</code> tab, you should find new rules deployed.</p> <p></p> <p>Note</p> <p>To setup your alert receiver, with Amazon SNS, follow this documentation</p>"},{"location":"eks/#custom-metrics-collection","title":"Custom metrics collection","text":"<p>In addition to the cluster metrics, if you are interested in collecting Prometheus metrics from your pods, you can use setup <code>custom metrics collection</code>. This will instruct the ADOT collector to scrape your applications metrics based on the configuration you provide. You can also exclude some of the metrics and save costs.</p> <p>Using the example, you can edit <code>examples/existing-cluster-with-base-and-infra/main.tf</code>. In the module <code>module \"workloads_infra\" {</code> add the following config (make sure the values matches your use case):</p> <pre><code>enable_custom_metrics = true\n\ncustom_metrics_config = {\n    # list of applications ports (example)\nports = [8000, 8080]\n\n    # list of series prefixes you want to discard from ingestion\ndropped_series_prefix = [\"go_gcc\"]\n}\n</code></pre> <p>After applying Terraform, on Grafana, you can query Prometheus for your application metrics, create alerts and build on your own dashboards. On the explorer section of Grafana, the following query will give you the containers exposing metrics that matched the custom metrics collection, grouped by cluster and node.</p> <pre><code>sum(up{job=\"custom-metrics\"}) by (container_name, cluster, nodename)\n</code></pre> <p></p>"},{"location":"eks/#troubleshooting","title":"Troubleshooting","text":"<p>When you upgrade the eks-monitoring module from v2.1.0 or earlier, the following error may occur.</p> <pre><code>Error: cannot patch \"prometheus-node-exporter\" with kind DaemonSet: DaemonSet.apps \"prometheus-node-exporter\" is invalid: spec.selector: Invalid value: v1.LabelSelector{MatchLabels:map[string]string{\"app.kubernetes.io/instance\":\"prometheus-node-exporter\", \"app.kubernetes.io/name\":\"prometheus-node-exporter\"}, MatchExpressions:[]v1.LabelSelectorRequirement(nil)}: field is immutable\n</code></pre> <p>This is due to the upgrade of the node-exporter chart from v2 to v4. Manually delete the node-exporter's DaemonSet as described in the link here, and then apply.</p> <pre><code>kubectl -n prometheus-node-exporter delete daemonset -l app=prometheus-node-exporter\nterraform apply\n</code></pre>"},{"location":"eks/destroy/","title":"Destroy resources","text":"<p>If you leave this stack running, you will continue to incur charges. To remove all resources created by Terraform, refresh your Grafana API key and run the command below.</p> <p>Warning</p> <p>Be careful, this command will removing everything created by Terraform. If you wish to keep your Amazon Managed Grafana or Amazon Managed Service for Prometheus workspaces. Remove them from your terraform state before running the destroy command.</p> <pre><code>terraform destroy\n</code></pre> <p>To remove resources from your Terraform state, run</p> <pre><code># prometheus workspace\nterraform state rm \"module.eks_observability_accelerator.aws_prometheus_workspace.this[0]\"\n</code></pre> <p>Note</p> <p>To view all the features proposed by this module, visit the module documentation.</p>"},{"location":"eks/java/","title":"Monitor Java/JMX applications running on Amazon EKS","text":"<p>Note</p> <p>Since v2.x, Java based applications monitoring on EKS has been merged within the eks-monitoring module to allow visibility both on the cluster and the workloads, #59.</p> <p>In addition to EKS infrastructure monitoring, the current example provides curated Grafana dashboards, Prometheus alerting and recording rules with multiple configuration options for Java based workloads on EKS.</p>"},{"location":"eks/java/#setup","title":"Setup","text":""},{"location":"eks/java/#1-add-java-metrics-dashboards-and-alerts","title":"1. Add Java metrics, dashboards and alerts","text":"<p>From the previous example's configuration, simply enable the Java pattern's flag.</p> <pre><code>module \"eks_monitoring\" {\n...\nenable_java = true\n}\n</code></pre> <p>You can further customize the Java pattern by providing <code>java_config</code> options.</p>"},{"location":"eks/java/#2-grafana-api-key","title":"2. Grafana API key","text":"<p>Make sure to refresh your temporary Grafana API key</p> <pre><code>export TF_VAR_managed_grafana_workspace_id=g-xxx\nexport TF_VAR_grafana_api_key=`aws grafana create-workspace-api-key --key-name \"observability-accelerator-$(date +%s)\" --key-role ADMIN --seconds-to-live 1200 --workspace-id $TF_VAR_managed_grafana_workspace_id --query key --output text`\n</code></pre>"},{"location":"eks/java/#deploy","title":"Deploy","text":"<p>Simply run this command to deploy.</p> <pre><code>terraform apply\n</code></pre> <p>Note</p> <p>To see the complete Java example, open the example on the repository</p>"},{"location":"eks/java/#visualization","title":"Visualization","text":""},{"location":"eks/java/#1-grafana-dashboards","title":"1. Grafana dashboards","text":"<p>Go to the Dashboards panel of your Grafana workspace. There will be a folder called <code>Observability Accelerator Dashboards</code></p> <p></p> <p>Open the \"Java/JMX\" dashboard to view its visualization</p> <p></p>"},{"location":"eks/java/#2-amazon-managed-service-for-prometheus-rules-and-alerts","title":"2. Amazon Managed Service for Prometheus rules and alerts","text":"<p>Open the Amazon Managed Service for Prometheus console and view the details of your workspace. Under the <code>Rules management</code> tab, you will find new rules deployed.</p> <p></p> <p>Note</p> <p>To setup your alert receiver, with Amazon SNS, follow this documentation</p>"},{"location":"eks/java/#deploy-an-example-java-application","title":"Deploy an example Java application","text":"<p>In this section we will reuse an example from the AWS OpenTelemetry collector repository. For convenience, the steps can be found below.</p>"},{"location":"eks/java/#1-clone-repository","title":"1. Clone repository","text":"<pre><code>git clone https://github.com/aws-observability/aws-otel-test-framework\ncd aws-otel-test-framework/sample-apps/jmx/\n</code></pre>"},{"location":"eks/java/#2-authenticate-to-amazon-ecr","title":"2. Authenticate to Amazon ECR","text":"<pre><code>export AWS_ACCOUNT_ID=`aws sts get-caller-identity --query Account --output text`\nexport AWS_REGION={region}\naws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com\n</code></pre>"},{"location":"eks/java/#3-create-an-amazon-ecr-repository","title":"3. Create an Amazon ECR repository","text":"<pre><code>aws ecr create-repository --repository-name prometheus-sample-tomcat-jmx \\\n--image-scanning-configuration scanOnPush=true \\\n--region $AWS_REGION\n</code></pre>"},{"location":"eks/java/#4-build-docker-image-and-push-to-ecr","title":"4. Build Docker image and push to ECR.","text":"<pre><code>docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/prometheus-sample-tomcat-jmx:latest .\ndocker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/prometheus-sample-tomcat-jmx:latest\n</code></pre>"},{"location":"eks/java/#5-install-sample-application","title":"5. Install sample application","text":"<pre><code>export SAMPLE_TRAFFIC_NAMESPACE=javajmx-sample\ncurl https://raw.githubusercontent.com/aws-observability/aws-otel-test-framework/terraform/sample-apps/jmx/examples/prometheus-metrics-sample.yaml &gt; metrics-sample.yaml\nsed -i \"s/{{aws_account_id}}/$AWS_ACCOUNT_ID/g\" metrics-sample.yaml\nsed -i \"s/{{region}}/$AWS_REGION/g\" metrics-sample.yaml\nsed -i \"s/{{namespace}}/$SAMPLE_TRAFFIC_NAMESPACE/g\" metrics-sample.yaml\nkubectl apply -f metrics-sample.yaml\n</code></pre> <p>Verify that the sample application is running:</p> <pre><code>kubectl get pods -n $SAMPLE_TRAFFIC_NAMESPACE\n\nNAME                              READY   STATUS              RESTARTS   AGE\ntomcat-bad-traffic-generator      1/1     Running             0          11s\ntomcat-example-7958666589-2q755   0/1     ContainerCreating   0          11s\ntomcat-traffic-generator          1/1     Running             0          11s\n</code></pre>"},{"location":"eks/logs/","title":"Viewing Logs","text":"<p>By default, we deploy a FluentBit daemon set in the cluster to collect worker logs for all namespaces. Logs collection can be disabled with <code>enable_logs = false</code>. Logs are collected and exported to Amazon CloudWatch Logs, which enables you to centralize the logs from all of your systems, applications, and AWS services that you use, in a single, highly scalable service.</p> <p>Further configuration options are available in the module documentation. This guide shows how you can leverage CloudWatch Logs in Amazon Managed Grafana for your cluster and application logs.</p>"},{"location":"eks/logs/#using-cloudwatch-logs-as-data-source-in-grafana","title":"Using CloudWatch Logs as data source in Grafana","text":"<p>Follow the documentation to enable Amazon CloudWatch as a data source. Make sure to provide permissions.</p> <p>Tip</p> <p>If you created your workspace with our provided example, Amazon CloudWatch data source has already been setup for you.</p> <p>All logs are delivered in the following CloudWatch Log groups naming pattern: <code>/aws/eks/observability-accelerator/{cluster-name}/{namespace}</code>. Log streams follow <code>{container-name}.{pod-name}</code>. In Grafana, querying and analyzing logs is done with CloudWatch Logs Insights</p>"},{"location":"eks/logs/#example-adot-collector-logs","title":"Example - ADOT collector logs","text":"<p>Select one or many log groups and run the following query. The example below, queries AWS Distro for OpenTelemetry (ADOT) logs</p> <pre><code>fields @timestamp, log\n| order @timestamp desc\n| limit 100\n</code></pre> <p></p>"},{"location":"eks/logs/#example-using-time-series-visualizations","title":"Example - Using time series visualizations","text":"<p>CloudWatch Logs syntax provide powerful functions to extract data from your logs. The <code>stats()</code> function allows you to calculate aggregate statistics with log field values. This is useful to have visualization on non-metric data from your applications.</p> <p>In the example below, we use the following query to graph the number of metrics collected by the ADOT collector</p> <pre><code>fields @timestamp, log\n| parse log /\"#metrics\": (?&lt;metrics_count&gt;\\d+)}/\n| stats avg(metrics_count) by bin(5m)\n| limit 100\n</code></pre> <p>Tip</p> <p>You can add logs in your dashboards with logs panel types or time series depending on your query results type.</p> <p></p> <p>Warning</p> <p>Querying CloudWatch logs will incur costs per GB scanned. Use small time windows and limits in your queries. Checkout the CloudWatch pricing page for more infos.</p>"},{"location":"eks/multicluster/","title":"AWS EKS Multicluster Observability","text":"<p>This example shows how to use the AWS Observability Accelerator, with more than one EKS cluster and verify the collected metrics from all the clusters in the dashboards of a common <code>Amazon Managed Grafana</code> workspace.</p>"},{"location":"eks/multicluster/#prerequisites","title":"Prerequisites","text":""},{"location":"eks/multicluster/#1-eks-clusters","title":"1. EKS clusters","text":"<p>Using the example eks-cluster-with-vpc, create two EKS clusters with the names:</p> <ol> <li><code>eks-cluster-1</code></li> <li><code>eks-cluster-2</code></li> </ol>"},{"location":"eks/multicluster/#2-amazon-managed-serivce-for-prometheus-amp-workspace","title":"2. Amazon Managed Serivce for Prometheus (AMP) workspace","text":"<p>We recommend that you create a new AMP workspace. To do that you can run the following command.</p> <p>Ensure you have the following necessary IAM permissions</p> <ul> <li><code>aps.CreateWorkspace</code></li> </ul> <pre><code>export TF_VAR_managed_prometheus_workspace_id=$(aws amp create-workspace --alias observability-accelerator --query='workspaceId' --output text)\n</code></pre>"},{"location":"eks/multicluster/#3-amazon-managed-grafana-amg-workspace","title":"3. Amazon Managed Grafana (AMG) workspace","text":"<p>To run this example you need an AMG workspace. If you have an existing workspace, create an environment variable as described below. To create a new workspace, visit our supporting example for managed Grafana.</p> <p>Note</p> <p>For the URL <code>https://g-xyz.grafana-workspace.eu-central-1.amazonaws.com</code>, the workspace ID would be <code>g-xyz</code></p> <pre><code>export TF_VAR_managed_grafana_workspace_id=g-xxx\n</code></pre>"},{"location":"eks/multicluster/#4-grafana-api-key","title":"4. Grafana API Key","text":"<p>AMG provides a control plane API for generating Grafana API keys. As a security best practice, we will provide to Terraform a short lived API key to run the <code>apply</code> or <code>destroy</code> command.</p> <p>Ensure you have the following necessary IAM permissions</p> <ul> <li><code>grafana.CreateWorkspaceApiKey</code></li> <li><code>grafana.DeleteWorkspaceApiKey</code></li> </ul> <pre><code>export TF_VAR_grafana_api_key=`aws grafana create-workspace-api-key --key-name \"observability-accelerator-$(date +%s)\" --key-role ADMIN --seconds-to-live 1200 --workspace-id $TF_VAR_managed_grafana_workspace_id --query key --output text`\n</code></pre>"},{"location":"eks/multicluster/#setup","title":"Setup","text":""},{"location":"eks/multicluster/#1-download-sources-and-initialize-terraform","title":"1. Download sources and initialize Terraform","text":"<pre><code>git clone https://github.com/aws-observability/terraform-aws-observability-accelerator.git\ncd terraform-aws-observability-accelerator/examples/eks-multicluster\nterraform init\n</code></pre>"},{"location":"eks/multicluster/#2-deploy","title":"2. Deploy","text":"<p>Verify by looking at the file <code>variables.tf</code> that there are two EKS clusters targeted for deployment by the names/ids:</p> <ol> <li><code>eks-cluster-1</code></li> <li><code>eks-cluster-2</code></li> </ol> <p>The difference in deployment between these clusters is that Terraform, when setting up the EKS cluster behind variable <code>eks_cluster_1_id</code> for observability, also sets up:</p> <ul> <li>Dashboard folder and files in <code>AMG</code></li> <li>Prometheus and Java, alerting and recording rules in <code>AMP</code></li> </ul> <p>Warning</p> <p>To override the defaults, create a <code>terraform.tfvars</code> and change the default values of the variables.</p> <p>Run the following command to deploy</p> <pre><code>terraform apply --auto-approve\n</code></pre>"},{"location":"eks/multicluster/#verifying-multicluster-observability","title":"Verifying Multicluster Observability","text":"<p>One you have successfully run the above setup, you should be able to see dashboards similar to the images shown below in <code>Amazon Managed Grafana</code> workspace.</p> <p>Note how you are able to use the <code>cluster</code> dropdown to filter the dashboards to metrics collected from a specific EKS cluster.</p> <p></p> <p></p>"},{"location":"eks/multicluster/#cleanup","title":"Cleanup","text":"<p>To clean up entirely, run the following command:</p> <pre><code>terraform destroy --auto-approve\n</code></pre>"},{"location":"eks/nginx/","title":"Monitor Nginx applications running on Amazon EKS","text":"<p>Note</p> <p>Since v2.x, NGINX based applications monitoring on EKS has been merged within the eks-monitoring module to allow visibility both on the cluster and the workloads, #59.</p> <p>In addition to EKS infrastructure monitoring, the current example provides curated Grafana dashboards, Prometheus alerting and recording rules with multiple configuration options for NGINX based workloads on EKS.</p>"},{"location":"eks/nginx/#setup","title":"Setup","text":""},{"location":"eks/nginx/#1-add-nginx-metrics-dashboards-and-alerts","title":"1. Add NGINX metrics, dashboards and alerts","text":"<p>From the EKS cluster monitoring example's configuration, simply enable the NGINX pattern's flag.</p> <pre><code>module \"eks_monitoring\" {\n...\nenable_nginx = true\n}\n</code></pre> <p>You can further customize the NGINX pattern by providing <code>nginx_config</code> options.</p>"},{"location":"eks/nginx/#2-grafana-api-key","title":"2. Grafana API key","text":"<p>Make sure to refresh your temporary Grafana API key</p> <pre><code>export TF_VAR_managed_grafana_workspace_id=g-xxx\nexport TF_VAR_grafana_api_key=`aws grafana create-workspace-api-key --key-name \"observability-accelerator-$(date +%s)\" --key-role ADMIN --seconds-to-live 1200 --workspace-id $TF_VAR_managed_grafana_workspace_id --query key --output text`\n</code></pre>"},{"location":"eks/nginx/#deploy","title":"Deploy","text":"<p>Simply run this command to deploy.</p> <pre><code>terraform apply\n</code></pre> <p>Note</p> <p>To see the complete NGINX example, open the example on the repository</p>"},{"location":"eks/nginx/#visualization","title":"Visualization","text":"<ol> <li>Grafana dashboards</li> </ol> <p>Go to the Dashboards panel of your Grafana workspace. You will see a list of dashboards under the <code>Observability Accelerator Dashboards</code></p> <p></p> <p>Open the NGINX dashboard and you will be able to view its visualization</p> <p></p> <ol> <li>Amazon Managed Service for Prometheus rules and alerts</li> </ol> <p>Open the Amazon Managed Service for Prometheus console and view the details of your workspace. Under the <code>Rules management</code> tab, you will find new rules deployed.</p> <p></p> <p>Note</p> <p>To setup your alert receiver, with Amazon SNS, follow this documentation</p>"},{"location":"eks/nginx/#deploy-an-example-application-to-visualize-metrics","title":"Deploy an example application to visualize metrics","text":"<p>In this section we will deploy sample application and extract metrics using AWS OpenTelemetry collector</p>"},{"location":"eks/nginx/#1-add-the-helm-incubator-repo","title":"1. Add the helm incubator repo:","text":"<pre><code>helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n</code></pre>"},{"location":"eks/nginx/#2-enter-the-following-command-to-create-a-new-namespace","title":"2. Enter the following command to create a new namespace:","text":"<pre><code>kubectl create namespace nginx-ingress-sample\n</code></pre>"},{"location":"eks/nginx/#3-enter-the-following-commands-to-install-nginx","title":"3. Enter the following commands to install NGINX:","text":"<pre><code>helm install my-nginx ingress-nginx/ingress-nginx \\\n--namespace nginx-ingress-sample \\\n--set controller.metrics.enabled=true \\\n--set-string controller.metrics.service.annotations.\"prometheus\\.io/port\"=\"10254\" \\\n--set-string controller.metrics.service.annotations.\"prometheus\\.io/scrape\"=\"true\"\n</code></pre>"},{"location":"eks/nginx/#4-set-an-external-ip-variable-to-the-value-of-the-external-ip-column-in-the-row-of-the-nginx-ingress-controller","title":"4. Set an EXTERNAL-IP variable to the value of the EXTERNAL-IP column in the row of the NGINX ingress controller.","text":"<pre><code>EXTERNAL_IP=your-nginx-controller-external-ip\n</code></pre>"},{"location":"eks/nginx/#5-start-some-sample-nginx-traffic-by-entering-the-following-command","title":"5. Start some sample NGINX traffic by entering the following command.","text":"<pre><code>SAMPLE_TRAFFIC_NAMESPACE=nginx-sample-traffic\ncurl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-deployment-manifest-templates/deployment-mode/service/cwagent-prometheus/sample_traffic/nginx-traffic/nginx-traffic-sample.yaml |\nsed \"s/{{external_ip}}/$EXTERNAL_IP/g\" |\nsed \"s/{{namespace}}/$SAMPLE_TRAFFIC_NAMESPACE/g\" |\nkubectl apply -f -\n</code></pre>"},{"location":"eks/nginx/#6-verify-if-the-application-is-running","title":"6. Verify if the application is running","text":"<pre><code>kubectl get pods -n nginx-ingress-sample\n</code></pre>"},{"location":"eks/nginx/#7-visualize-the-applications-dashboard","title":"7. Visualize the Application's dashboard","text":"<p>Log back into your Managed Grafana Workspace and navigate to the dashboard side panel, click on <code>Observability Accelerator Dashboards</code> Folder and open the <code>NGINX</code> Dashboard.</p>"},{"location":"helpers/managed-grafana/","title":"Creating a new Amazon Managed Grafana Workspace","text":"<p>This example creates an Amazon Managed Grafana Workspace with Amazon CloudWatch, AWS X-Ray and Amazon Managed Service for Prometheus datasources.</p> <p>The authentication method chosen for this example is with IAM Identity Center (former SSO). You can extend this example to add SAML.</p>"},{"location":"helpers/managed-grafana/#prerequisites","title":"Prerequisites","text":"<p>Note</p> <p>Make sure to complete the prerequisites section before proceeding.</p>"},{"location":"helpers/managed-grafana/#setup","title":"Setup","text":""},{"location":"helpers/managed-grafana/#1-download-sources-and-initialize-terraform","title":"1. Download sources and initialize Terraform","text":"<pre><code>git clone https://github.com/aws-observability/terraform-aws-observability-accelerator.git\ncd terraform-aws-observability-accelerator/examples/managed-grafana-workspace\nterraform init\n</code></pre>"},{"location":"helpers/managed-grafana/#2-aws-region","title":"2. AWS Region","text":"<p>Specify the AWS Region where the resources will be deployed:</p> <pre><code>export TF_VAR_aws_region=xxx\n</code></pre>"},{"location":"helpers/managed-grafana/#deploy","title":"Deploy","text":"<p>Simply run this command to deploy the example</p> <pre><code>terraform apply\n</code></pre>"},{"location":"helpers/managed-grafana/#authentication","title":"Authentication","text":"<p>After apply, Terraform will output the Worksapce's URL, but you need to:</p> <ul> <li>Setup user(s) in the IAM Identity Center (former SSO)</li> <li>Assign the user(s) to the workspace with proper permissions</li> </ul> <p></p>"},{"location":"helpers/managed-grafana/#cleanup","title":"Cleanup","text":"<p>To clean up your environment, destroy the Terraform example by running</p> <pre><code>terraform destroy\n</code></pre>"},{"location":"helpers/new-eks-cluster/","title":"Creating a new Amazon EKS cluster with VPC","text":"<p>Note</p> <p>This example is a subset from this EKS Blueprint example</p> <p>This example deploys the following:</p> <ul> <li>New sample VPC, 3 Private Subnets and 3 Public Subnets</li> <li>Internet gateway for Public Subnets and NAT Gateway for Private Subnets</li> <li>EKS Cluster Control plane with one managed node group</li> </ul>"},{"location":"helpers/new-eks-cluster/#prerequisites","title":"Prerequisites","text":"<p>Note</p> <p>Make sure to complete the prerequisites section before proceeding.</p>"},{"location":"helpers/new-eks-cluster/#setup","title":"Setup","text":""},{"location":"helpers/new-eks-cluster/#1-download-sources-and-initialize-terraform","title":"1. Download sources and initialize Terraform","text":"<pre><code>git clone https://github.com/aws-observability/terraform-aws-observability-accelerator.git\ncd examples/eks-cluster-with-vpc/\nterraform init\n</code></pre>"},{"location":"helpers/new-eks-cluster/#2-aws-region","title":"2. AWS Region","text":"<p>Specify the AWS Region where the resources will be deployed:</p> <pre><code>export TF_VAR_aws_region=xxx\n</code></pre>"},{"location":"helpers/new-eks-cluster/#3-cluster-name","title":"3. Cluster Name","text":"<p>Specify the name of your EKS cluster:</p> <pre><code>export TF_VAR_cluster_name=xxx\n</code></pre>"},{"location":"helpers/new-eks-cluster/#deploy","title":"Deploy","text":"<p>Simply run this command to deploy the example</p> <pre><code>terraform apply\n</code></pre>"},{"location":"helpers/new-eks-cluster/#additional-configuration-optional","title":"Additional configuration (optional)","text":""},{"location":"helpers/new-eks-cluster/#1-instance-type","title":"1. Instance Type","text":"<p>Depending on your region or limitations in your account, you might need to change to a different instance type. To do this, you can define the instance type to use: <pre><code>export TF_VAR_managed_node_instance_type=xxx\n</code></pre></p>"},{"location":"helpers/new-eks-cluster/#2-amazon-elastic-kubernetes-service-amazon-eks-version","title":"2. Amazon Elastic Kubernetes Service (Amazon EKS) Version","text":"<p>You can override the version of the cluster also: <pre><code>export TF_VAR_eks_version=xxx\n</code></pre></p>"},{"location":"helpers/new-eks-cluster/#login-to-your-cluster","title":"Login to your cluster","text":"<p>EKS Cluster details can be extracted from terraform output or from AWS Console to get the name of cluster. Use the following commands in your local machine where you want to interact with your EKS Cluster.</p>"},{"location":"helpers/new-eks-cluster/#1-run-update-kubeconfig-command","title":"1. Run <code>update-kubeconfig</code> command","text":"<p><code>~/.kube/config</code> file gets updated with cluster details and certificate from the below command</p> <pre><code>aws eks --region &lt;enter-your-region&gt; update-kubeconfig --name &lt;cluster-name&gt;\n</code></pre>"},{"location":"helpers/new-eks-cluster/#2-list-all-the-worker-nodes-by-running-the-command-below","title":"2. List all the worker nodes by running the command below","text":"<pre><code>kubectl get nodes\n</code></pre>"},{"location":"helpers/new-eks-cluster/#3-list-all-the-pods-running-in-kube-system-namespace","title":"3. List all the pods running in <code>kube-system</code> namespace","text":"<pre><code>kubectl get pods -n kube-system\n</code></pre>"},{"location":"helpers/new-eks-cluster/#cleanup","title":"Cleanup","text":"<p>To clean up your environment, destroy the Terraform modules in reverse order.</p> <p>Destroy the Kubernetes Add-ons, EKS cluster with Node groups and VPC</p> <pre><code>terraform destroy -target=\"module.eks_blueprints_kubernetes_addons\" -auto-approve\nterraform destroy -target=\"module.eks_blueprints\" -auto-approve\nterraform destroy -target=\"module.vpc\" -auto-approve\n</code></pre> <p>Finally, destroy any additional resources that are not in the above modules</p> <pre><code>terraform destroy -auto-approve\n</code></pre>"},{"location":"workloads/managed-prometheus/","title":"Monitoring Amazon Managed Service for Prometheus workspaces","text":"<p>This example allows you to monitor your Amazon Managed Service for Prometheus workspaces using Amazon CloudWatch vended metrics and logs. It also creates configurable CloudWatch alarms for service usage limits. Those informations are displayed in a Managed Grafana workspace dashboard.</p>"},{"location":"workloads/managed-prometheus/#prerequisites","title":"Prerequisites","text":"<p>Note</p> <p>Make sure to complete the prerequisites section before proceeding. This example doesn't require an Amazon EKS cluster and Kubernetes tools (ex. <code>kubectl</code>).</p> <p>Note</p> <p>This example requires CloudWatch Billing Metrics to be enabled in order to create some of the alarms in this module.</p>"},{"location":"workloads/managed-prometheus/#setup","title":"Setup","text":""},{"location":"workloads/managed-prometheus/#1-download-sources-and-initialize-terraform","title":"1. Download sources and initialize Terraform","text":"<pre><code>git clone https://github.com/aws-observability/terraform-aws-observability-accelerator.git\ncd examples/managed-prometheus-monitoring\nterraform init\n</code></pre>"},{"location":"workloads/managed-prometheus/#2-aws-region","title":"2. AWS Region","text":"<p>Specify the AWS Region where the resources will be deployed:</p> <pre><code>export TF_VAR_aws_region=xxx\n</code></pre>"},{"location":"workloads/managed-prometheus/#3-amazon-managed-service-for-prometheus-workspace","title":"3. Amazon Managed Service for Prometheus workspace","text":"<p>Specify one or more workspaces in the same Region separated with a comma seperated string.</p> <pre><code>export TF_VAR_managed_prometheus_workspace_id=\"ws-xxx\"\n</code></pre> <p>You can use the following command to create alarms for all of the workspaces in a region.</p> <pre><code>export TF_VAR_managed_prometheus_workspace_id=$(aws amp list-workspaces --query 'workspaces[].workspaceId' --output text |  sed -E 's/\\t/,/g')\n</code></pre>"},{"location":"workloads/managed-prometheus/#4-amazon-managed-grafana-workspace","title":"4. Amazon Managed Grafana workspace","text":"<p>To run this example you need an Amazon Managed Grafana workspace.</p> <pre><code>export TF_VAR_managed_grafana_workspace_id=g-xxx\n</code></pre>"},{"location":"workloads/managed-prometheus/#5-grafana-api-key","title":"5. Grafana API Key","text":"<p>Amazon Managed Grafana provides a control plane API for generating Grafana API keys. As a security best practice, we will provide to Terraform a short lived API key to run the <code>apply</code> or <code>destroy</code> command.</p> <p>Ensure you have necessary IAM permissions (<code>CreateWorkspaceApiKey, DeleteWorkspaceApiKey</code>)</p> <pre><code>export TF_VAR_grafana_api_key=`aws grafana create-workspace-api-key --key-name \"observability-accelerator-$(date +%s)\" --key-role ADMIN --seconds-to-live 1200 --workspace-id $TF_VAR_managed_grafana_workspace_id --query key --output text`\n</code></pre>"},{"location":"workloads/managed-prometheus/#deploy","title":"Deploy","text":"<p>Simply run this command to deploy the example</p> <pre><code>terraform apply\n</code></pre>"},{"location":"workloads/managed-prometheus/#visualization","title":"Visualization","text":""},{"location":"workloads/managed-prometheus/#1-cloudwatch-datasource-on-grafana","title":"1. Cloudwatch datasource on Grafana","text":"<p>Open your Grafana workspace and under Configuration -&gt; Data sources, you should see <code>aws-observability-accelerator-cloudwatch</code>. Open and click <code>Save &amp; test</code>. You should see a notification confirming that the CloudWatch datasource is ready to be used on Grafana.</p>"},{"location":"workloads/managed-prometheus/#2-grafana-dashboards","title":"2. Grafana dashboards","text":"<p>Go to the Dashboards panel of your Grafana workspace. You should see a list of dashboards under the <code>AMP Monitoring Dashboards</code> folder.</p> <p>Open the <code>AMP Accelerator Dashboard</code> to see a visualization of the AMP workspace.</p> <p></p>"},{"location":"workloads/managed-prometheus/#3-amazon-managed-service-for-prometheus-cloudwatch-alarms","title":"3. Amazon Managed Service for Prometheus CloudWatch Alarms.","text":"<p>Open the CloudWatch console and click <code>Alarms</code> &gt; <code>All Alarms</code> to review the service limit alarms.</p> <p></p> <p>In us-east-1 region an alarm is created for billing. This alarm utilizes anomaly detection to detect anomalies in the Estimated Charges billing metric.</p> <p></p>"},{"location":"workloads/managed-prometheus/#destroy-resources","title":"Destroy resources","text":"<p>If you leave this stack running, you will continue to incur charges. To remove all resources created by Terraform, refresh your Grafana API key and run the command below.</p> <p>Warning</p> <p>Be careful, this command will remove everything created by Terraform. If you wish to keep your Amazon Managed Grafana Dashboards or CloudWatch Alarms. Remove them from your terraform state before running the destroy command.</p> <pre><code>terraform destroy\n</code></pre>"}]}